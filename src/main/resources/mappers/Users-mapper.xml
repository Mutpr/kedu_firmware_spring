<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Users">

    <!-- 사용자 정보를 삽입하는 쿼리 -->
    <insert id="insertUser" parameterType="com.kedu.firmware.DTO.UsersDTO">
        INSERT INTO users (
            users_seq, users_code, users_name, users_password, 
            users_email, users_full_name, department_code, 
            unit_code, users_created_at, users_updated_at, users_is_admin
        )
        VALUES (
            users_seq.NEXTVAL, #{users_code}, #{users_name}, #{users_password}, 
            #{users_email}, #{users_full_name}, #{department_code}, 
            #{unit_code}, SYSTIMESTAMP, SYSTIMESTAMP, 
            <if test="users_is_admin != null">
                #{users_is_admin}
            </if>
            <if test="users_is_admin == null">
                0
            </if>
        )
    </insert>

    <!-- 사용자 코드로 사용자 정보를 조회하는 쿼리 -->
    <select id="findUserByCode" parameterType="String" resultType="com.kedu.firmware.DTO.UsersDTO">
        SELECT * FROM users WHERE TRIM(users_code) = TRIM(#{users_code})
    </select>

    <!-- 사용자 시퀀스 ID로 사용자 정보를 조회하는 쿼리 -->
    <select id="findUserBySeq" parameterType="int" resultType="com.kedu.firmware.DTO.UsersDTO">
        SELECT * FROM users WHERE users_seq = #{users_seq}
    </select>

    <!-- 사용자 정보를 업데이트하는 쿼리 -->
    <update id="updateUser" parameterType="com.kedu.firmware.DTO.UsersDTO">
        UPDATE users SET
            users_name = #{users_name},
            users_password = #{users_password},
            users_email = #{users_email},
            users_full_name = #{users_full_name},
            department_code = #{department_code},
            unit_code = #{unit_code},
            users_created_at = #{users_created_at},
            users_updated_at = SYSTIMESTAMP,
            users_is_admin = 
            <if test="users_is_admin != null">
                #{users_is_admin}
            </if>
            <if test="users_is_admin == null">
                0
            </if>
        WHERE users_seq = #{users_seq}
    </update>

    <!-- 사용자 시퀀스로 사용자 정보를 삭제하는 쿼리 -->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM users WHERE users_seq = #{users_seq}
    </delete>

    <!-- 사용자 코드로 사용자 정보를 조회하는 쿼리 (별칭 사용) -->
    <select id="selectById" parameterType="String" resultType="com.kedu.firmware.DTO.UsersDTO">
        SELECT * FROM users WHERE users_code = #{id}
    </select>
    
    <!-- 부서 코드로 직원 수를 카운트하는 쿼리 -->
    <select id="countEmployeesInDepartment" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM users WHERE SUBSTR(users_code, 1, LENGTH(#{departmentCode})) = #{departmentCode}
    </select>
    
    <!-- 방금 삽입한 유저의 시퀀스를 가져오는 쿼리 -->
    <select id="getLastInsertedUserSeq" resultType="int">
        SELECT users_seq.CURRVAL FROM dual
    </select>

    <!-- 모든 사용자 정보를 조회하는 쿼리 추가 -->
    <!-- 전체 사용자 정보를 조회하여 반환하는 쿼리 -->
    <select id="getAllUsers" resultType="com.kedu.firmware.DTO.UsersDTO">
        SELECT * FROM users
    </select>
    
     <!-- 사용자 코드를 통해 사용자 삭제 -->
    <delete id="deleteUserByCode" parameterType="String">
        DELETE FROM users WHERE users_code = #{users_code}
    </delete>
    
     <!-- 사용자 시퀀스로 사용자 이름을 가져오는 쿼리 -->
    <select id="findUserNameBySeq" resultType="java.lang.String">
        SELECT users_name
        FROM users
        WHERE users_seq = #{usersSeq}
    </select>

	<!-- 유저 코드로 본인을 제외한 부서 구성원의 이메일과 이름 조회 (이메일)-->
	<select id="findDepartmentInfoByUserCode" resultType="map">
		SELECT users_email, users_name
    FROM users
    WHERE users_code LIKE #{departmentPrefix} || '%'
      AND users_code != #{excludeLoginID}
	</select>
	
	<!-- 유저 이메일로 해당하는 유저가 있는지 조회하는 쿼리 (이메일)-->
	<select id="selectUserByEmail" resultType="com.kedu.firmware.DTO.UsersDTO">
		select * from users where users_email = #{Email}
	</select>
	
	<!-- 해당하는 유저와 같은 부서 인원들의 모든 정보를 불러옴(프로필 포함) -->
	<select id="findDepartmentInfoWithProfileByUserCode" resultType="map">
	    SELECT 
	        u.users_seq AS usersSeq, 
	        u.users_code AS usersCode, 
	        u.users_name AS usersName, 
	        u.users_password AS usersPassword, 
	        u.users_email AS usersEmail, 
	        u.users_full_name AS usersFullName, 
	        u.department_code AS departmentCode, 
	        u.unit_code AS unitCode, 
	        TO_CHAR(u.users_created_at, 'YYYY-MM-DD HH24:MI:SS') AS usersCreatedAt, 
	        TO_CHAR(u.users_updated_at, 'YYYY-MM-DD HH24:MI:SS') AS usersUpdatedAt, 
	        u.users_is_admin AS usersIsAdmin,
	        p.phone_number AS phoneNumber,
	        p.address AS address,
	        p.zip_code AS zipCode,
	        p.detailed_address AS detailedAddress,
	        p.profile_picture_url AS profilePictureUrl,
	        p.rank AS rank,
	        p.employee_id AS employeeId,
	        p.join_date AS joinDate,
	        p.email AS profileEmail
	    FROM 
	        users u
	    LEFT JOIN 
	        user_profile p ON u.users_seq = p.user_seq
	    WHERE 
	        u.users_code LIKE #{departmentPrefix} || '%'
	        AND u.users_code != #{excludeLoginID}
	</select>


	
</mapper>
